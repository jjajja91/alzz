<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="alz.board.mapper.BoardMapper">

	<sql id="boardCriteria">
		<trim prefix="(" suffix=") AND " prefixOverrides="OR">
			<foreach collection="typeArr" item='type'>
				<trim prefix="OR">
					<choose>
						<when test="type == 'T'.toString()">
							title like '%'||#{keyword}||'%'
						</when>
						<when test="type == 'C'.toString()">
							content like '%'||#{keyword}||'%'
						</when>
						<when test="type == 'W'.toString()">
							nickname like '%'||#{keyword}||'%'
						</when>
					</choose>
				</trim>
			</foreach>
		</trim>
	</sql>

	<select id="selectAll" resultType="alz.board.domain.BoardDTO">
		<![CDATA[
			select id, title, content, written_at writtenAt, updated_at updatedAt, like_cnt likeCnt, 
					comment_cnt commentCnt, view_cnt viewCnt, board_order boardOrder, nickname, 
					parent_id parentId, type_id typeId, writer_id writerId  
			from alz_board 
			where id > 0
			
		]]>
	</select>

	<select id="selectWithPaging" resultType="alz.board.domain.BoardDTO">

		<![CDATA[
          select id, title, content, writtenAt, updatedAt, likeCnt, commentCnt, viewCnt,
                 boardOrder, nickname, parentId, typeId, writerId  
          from (select rownum, rn, id, title, content, writtenAt, updatedAt, likeCnt, commentCnt, 
                       viewCnt, boardOrder, nickname, parentId, typeId, writerId 
                from (select rownum rn, id, title, content, writtenAt, updatedAt, likeCnt, commentCnt, 
                             viewCnt, boardOrder, nickname, parentId, typeId, writerId
                      from  (select id, title, content, written_at writtenAt, updated_at updatedAt, 
                                    like_cnt likeCnt, comment_cnt commentCnt, view_cnt viewCnt,
                                    board_order boardOrder, nickname, parent_id parentId, type_id typeId, writer_id writerId 
                             from	alz_board
                             where 
		]]>              
		<include refid="boardCriteria"></include>
        <![CDATA[
									type_id = #{typeId}
									start with parent_id = 0
									connect by prior id = parent_id
									order siblings by boardOrder desc
                            )
                      where  rownum <= #{pageNum} * #{amount} 
                      )
			     )
		   where rn > (#{pageNum} -1) * #{amount}
		   start with parentId = 0
		   connect by prior id = parentId
		   order siblings by boardOrder desc
		]]>
	</select>

	<select id="selectById" resultType="alz.board.domain.BoardDTO">
		select id, title, content,
		written_at writtenAt, updated_at updatedAt, like_cnt likeCnt,
		comment_cnt commentCnt,
		view_cnt viewCnt, board_order boardOrder,
		nickname, parent_id parentId,
		type_id typeId, writer_id writerId
		from
		alz_board where id = #{id}
	</select>

	<select id="getTotalCount" resultType="int">
		select count(*)
		from alz_board
		where
		<include refid="boardCriteria"></include>
		id > 0
	</select>

	<insert id="insert">
		<selectKey keyProperty="id" order="BEFORE" resultType="long">
			select alz_board_seq.nextval from dual
		</selectKey>

		insert into alz_board (id, title, content, nickname, type_id,
		parent_id, board_order, writer_id)
		values (#{id}, #{title}, #{content},
		#{nickname}, #{typeId}, '0', #{id}, #{writerId})

	</insert>

	<insert id="replyInsert">
		<selectKey keyProperty="id" order="BEFORE" resultType="long">
			select alz_board_seq.nextval from dual
		</selectKey>
		insert into alz_board (id, title, content, nickname, type_id,
		parent_id, board_order, writer_id)
		values (#{id}, #{title}, #{content},
		#{nickname}, #{typeId}, #{boardOrder}, #{boardOrder}, #{writerId})

	</insert>

	<insert id="rereplyInsert">
		<selectKey keyProperty="id" order="BEFORE" resultType="long">
			select alz_board_seq.nextval from dual
		</selectKey>
		insert into alz_board (id, title, content, nickname, type_id,
		parent_id, board_order, writer_id)
		values (#{id}, #{title}, #{content},
		#{nickname}, #{typeId}, #{parentId}, #{boardOrder}, #{writerId})

	</insert>

	<update id="insertReply"
		parameterType="alz.board.domain.BoardDTO">
		update alz_board set title ='re :'||title where id=#{id}
	</update>

	<delete id="deleteById">
		delete from alz_board where id = #{id}
	</delete>

	<select id="getCommentsCnt" resultType="long">
		select comment_cnt from
		alz_board where id = #{id}
	</select>

	<select id="getLikeCnt" resultType="long">
		select like_cnt from
		alz_board where id = #{id}
	</select>

	<update id="updateById"
		parameterType="alz.board.domain.BoardDTO">
		update alz_board
		set title = #{title},
		content =
		#{content},
		updated_at = sysdate
		where id = #{id}
	</update>

	<select id="reviewOption"
		resultType="alz.board.domain.ReviewOptDTO">
		select l.title title, l.id id, od.order_id orderId
		from
		alz_order_detail od,
		alz_merchandise md,
		alz_lesson l
		where
		od.merchandise_id = md.id
		and md.ref_id = l.id
		and
		od.user_id = #{id}
		and od.review_chk = 0
		and l.state = 10
	</select>

	<insert id="createReview"
		parameterType="alz.board.domain.BoardDTO">
		<selectKey keyProperty="id" order="BEFORE" resultType="long">
			select alz_board_seq.nextval from dual
		</selectKey>
		insert into alz_board (id, title, content, nickname, type_id,
		parent_id, board_order, writer_id)
		values (#{id}, #{title}, #{content},
		#{nickname}, #{typeId}, '0', #{id}, #{writerId})

	</insert>

	<insert id="createReviewRate">
		insert into alz_lesson_review (lesson_review,
		teacher_review, lesson_id,
		board_id, reviewer_id
		)
		values
		(#{lessonReview}, #{teacherReview},
		#{lessonId}, #{id}, #{writerId})
	</insert>

	<update id="reviewChk" parameterType="long">
		update alz_order_detail
		set
		review_chk = 1
		where merchandise_id = #{merchandiseId} 
		and user_id = #{id}
	</update>

	<select id="lessonChk" resultType="long">
		select id
		from
		alz_merchandise
		where ref_id = #{lessonId}

	</select>


	<select id="readReview" resultType="alz.board.domain.ReviewDTO">
		select *
		from
		alz_lesson_review
		where board_id = #{id}
		and reviewer_id = #{writerId}

	</select>

	<select id="getTitle" resultType="alz.lesson.domain.LessonDTO">
		select *
		from
		alz_lesson
		where id
		= #{lessonId}
	</select>
	
	<select id="getBoardName" resultType="String">
		select name
		from alz_board_type
		where id = #{id}
	</select>

	<update id="updateReview"
		parameterType="alz.board.domain.BoardDTO">
		update alz_lesson_review
		set lesson_review = #{lessonReview},
		teacher_review = #{teacherReview}
		where board_id = #{id}
	</update>

</mapper>
